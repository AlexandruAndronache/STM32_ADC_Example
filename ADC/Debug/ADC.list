
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000330c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080034dc  080034dc  000044dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003538  08003538  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003538  08003538  00004538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003540  08003540  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003540  08003540  00004540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003544  08003544  00004544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003548  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000005c  080035a4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080035a4  00005290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f16  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e0  00000000  00000000  0000dfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0000f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ec  00000000  00000000  0000ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223f2  00000000  00000000  00010534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa80  00000000  00000000  00032926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4e0c  00000000  00000000  0003d3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001121b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002404  00000000  00000000  001121f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001145fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080034c4 	.word	0x080034c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080034c4 	.word	0x080034c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fa8b 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f837 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f911 	bl	80007e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c2:	f000 f893 	bl	80006ec <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f8e3 	bl	8000790 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80005ca:	4813      	ldr	r0, [pc, #76]	@ (8000618 <main+0x68>)
 80005cc:	f000 fb5a 	bl	8000c84 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 80005d0:	2114      	movs	r1, #20
 80005d2:	4811      	ldr	r0, [pc, #68]	@ (8000618 <main+0x68>)
 80005d4:	f000 fc28 	bl	8000e28 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 80005d8:	480f      	ldr	r0, [pc, #60]	@ (8000618 <main+0x68>)
 80005da:	f000 fcb0 	bl	8000f3e <HAL_ADC_GetValue>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <main+0x6c>)
 80005e4:	601a      	str	r2, [r3, #0]
	  sprintf(msg, "ADC Value: %d\r\n", adc_value);
 80005e6:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <main+0x6c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	490c      	ldr	r1, [pc, #48]	@ (8000620 <main+0x70>)
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <main+0x74>)
 80005f0:	f002 fac8 	bl	8002b84 <siprintf>
	  int size = strlen(msg);
 80005f4:	480b      	ldr	r0, [pc, #44]	@ (8000624 <main+0x74>)
 80005f6:	f7ff fe0b 	bl	8000210 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, size, HAL_MAX_DELAY);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	b29a      	uxth	r2, r3
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	4907      	ldr	r1, [pc, #28]	@ (8000624 <main+0x74>)
 8000608:	4807      	ldr	r0, [pc, #28]	@ (8000628 <main+0x78>)
 800060a:	f001 feff 	bl	800240c <HAL_UART_Transmit>
	  HAL_Delay(200);
 800060e:	20c8      	movs	r0, #200	@ 0xc8
 8000610:	f000 fad0 	bl	8000bb4 <HAL_Delay>
  {
 8000614:	bf00      	nop
 8000616:	e7d8      	b.n	80005ca <main+0x1a>
 8000618:	20000078 	.word	0x20000078
 800061c:	20000108 	.word	0x20000108
 8000620:	080034dc 	.word	0x080034dc
 8000624:	2000010c 	.word	0x2000010c
 8000628:	200000c0 	.word	0x200000c0

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	@ 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fac2 	bl	8002bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <SystemClock_Config+0xb8>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <SystemClock_Config+0xb8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <SystemClock_Config+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000678:	4a1b      	ldr	r2, [pc, #108]	@ (80006e8 <SystemClock_Config+0xbc>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <SystemClock_Config+0xbc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fbc5 	bl	8001e30 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006ac:	f000 f8b4 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f8ec 	bl	80018a8 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d6:	f000 f89f 	bl	8000818 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <MX_ADC1_Init+0x9c>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072a:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_ADC1_Init+0x98>)
 800072c:	4a17      	ldr	r2, [pc, #92]	@ (800078c <MX_ADC1_Init+0xa0>)
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000738:	2201      	movs	r2, #1
 800073a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	@ (8000784 <MX_ADC1_Init+0x98>)
 800074c:	f000 fa56 	bl	8000bfc <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 f85f 	bl	8000818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000762:	2302      	movs	r3, #2
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	@ (8000784 <MX_ADC1_Init+0x98>)
 800076c:	f000 fbf4 	bl	8000f58 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000776:	f000 f84f 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000078 	.word	0x20000078
 8000788:	40012000 	.word	0x40012000
 800078c:	0f000001 	.word	0x0f000001

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f001 fdd0 	bl	800236c <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f821 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000c0 	.word	0x200000c0
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_GPIO_Init+0x30>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <MX_GPIO_Init+0x30>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_GPIO_Init+0x30>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	@ (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000838:	6453      	str	r3, [r2, #68]	@ 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	@ (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	@ 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <HAL_ADC_MspInit+0x7c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d127      	bne.n	80008e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <HAL_ADC_MspInit+0x84>)
 80008e2:	f000 fe4d 	bl	8001580 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	@ 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012000 	.word	0x40012000
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a19      	ldr	r2, [pc, #100]	@ (8000980 <HAL_UART_MspInit+0x84>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d12b      	bne.n	8000976 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <HAL_UART_MspInit+0x88>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a17      	ldr	r2, [pc, #92]	@ (8000984 <HAL_UART_MspInit+0x88>)
 8000928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <HAL_UART_MspInit+0x88>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <HAL_UART_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a10      	ldr	r2, [pc, #64]	@ (8000984 <HAL_UART_MspInit+0x88>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <HAL_UART_MspInit+0x88>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000956:	230c      	movs	r3, #12
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000966:	2307      	movs	r3, #7
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <HAL_UART_MspInit+0x8c>)
 8000972:	f000 fe05 	bl	8001580 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40004400 	.word	0x40004400
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <MemManage_Handler+0x4>

080009a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e2:	f000 f8c7 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f002 f8da 	bl	8002bd4 <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20020000 	.word	0x20020000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	20000140 	.word	0x20000140
 8000a54:	20000290 	.word	0x20000290

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	@ (8000abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f002 f899 	bl	8002be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fd7f 	bl	80005b0 <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ac0:	08003548 	.word	0x08003548
  ldr r2, =_sbss
 8000ac4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ac8:	20000290 	.word	0x20000290

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b10 <HAL_Init+0x40>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <HAL_Init+0x40>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_Init+0x40>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 fd0d 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fe8e 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fd17 	bl	8001566 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 fced 	bl	800152e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000144 	.word	0x20000144

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000144 	.word	0x20000144

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <HAL_Delay+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bda:	bf00      	nop
 8000bdc:	f7ff ffde 	bl	8000b9c <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008

08000bfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e033      	b.n	8000c7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d109      	bne.n	8000c2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fe2a 	bl	8000874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d118      	bne.n	8000c6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c42:	f023 0302 	bic.w	r3, r3, #2
 8000c46:	f043 0202 	orr.w	r2, r3, #2
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 fab4 	bl	80011bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f023 0303 	bic.w	r3, r3, #3
 8000c62:	f043 0201 	orr.w	r2, r3, #1
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c6a:	e001      	b.n	8000c70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <HAL_ADC_Start+0x1a>
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	e0b2      	b.n	8000e04 <HAL_ADC_Start+0x180>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d018      	beq.n	8000ce6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0201 	orr.w	r2, r2, #1
 8000cc2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cc4:	4b52      	ldr	r3, [pc, #328]	@ (8000e10 <HAL_ADC_Start+0x18c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a52      	ldr	r2, [pc, #328]	@ (8000e14 <HAL_ADC_Start+0x190>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	0c9a      	lsrs	r2, r3, #18
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000cd8:	e002      	b.n	8000ce0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f9      	bne.n	8000cda <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d17a      	bne.n	8000dea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d007      	beq.n	8000d26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d32:	d106      	bne.n	8000d42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d38:	f023 0206 	bic.w	r2, r3, #6
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d40:	e002      	b.n	8000d48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d50:	4b31      	ldr	r3, [pc, #196]	@ (8000e18 <HAL_ADC_Start+0x194>)
 8000d52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000d5c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d12a      	bne.n	8000dc0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000e1c <HAL_ADC_Start+0x198>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d015      	beq.n	8000da0 <HAL_ADC_Start+0x11c>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a29      	ldr	r2, [pc, #164]	@ (8000e20 <HAL_ADC_Start+0x19c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d105      	bne.n	8000d8a <HAL_ADC_Start+0x106>
 8000d7e:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <HAL_ADC_Start+0x194>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00a      	beq.n	8000da0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a25      	ldr	r2, [pc, #148]	@ (8000e24 <HAL_ADC_Start+0x1a0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d136      	bne.n	8000e02 <HAL_ADC_Start+0x17e>
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_ADC_Start+0x194>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d130      	bne.n	8000e02 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d129      	bne.n	8000e02 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	e020      	b.n	8000e02 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a15      	ldr	r2, [pc, #84]	@ (8000e1c <HAL_ADC_Start+0x198>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d11b      	bne.n	8000e02 <HAL_ADC_Start+0x17e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d114      	bne.n	8000e02 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	e00b      	b.n	8000e02 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f043 0210 	orr.w	r2, r3, #16
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	f043 0201 	orr.w	r2, r3, #1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20000000 	.word	0x20000000
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	40012300 	.word	0x40012300
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	40012100 	.word	0x40012100
 8000e24:	40012200 	.word	0x40012200

08000e28 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e44:	d113      	bne.n	8000e6e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e54:	d10b      	bne.n	8000e6e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f043 0220 	orr.w	r2, r3, #32
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e063      	b.n	8000f36 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e6e:	f7ff fe95 	bl	8000b9c <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e74:	e021      	b.n	8000eba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d01d      	beq.n	8000eba <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d007      	beq.n	8000e94 <HAL_ADC_PollForConversion+0x6c>
 8000e84:	f7ff fe8a 	bl	8000b9c <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d212      	bcs.n	8000eba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d00b      	beq.n	8000eba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f043 0204 	orr.w	r2, r3, #4
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e03d      	b.n	8000f36 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d1d6      	bne.n	8000e76 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f06f 0212 	mvn.w	r2, #18
 8000ed0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d123      	bne.n	8000f34 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d11f      	bne.n	8000f34 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d111      	bne.n	8000f34 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d105      	bne.n	8000f34 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f043 0201 	orr.w	r2, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x1c>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e113      	b.n	800119c <HAL_ADC_ConfigChannel+0x244>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	d925      	bls.n	8000fd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68d9      	ldr	r1, [r3, #12]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	3b1e      	subs	r3, #30
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43da      	mvns	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68d9      	ldr	r1, [r3, #12]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4403      	add	r3, r0
 8000fc2:	3b1e      	subs	r3, #30
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	e022      	b.n	8001016 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6919      	ldr	r1, [r3, #16]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6919      	ldr	r1, [r3, #16]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	4603      	mov	r3, r0
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4403      	add	r3, r0
 800100c:	409a      	lsls	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b06      	cmp	r3, #6
 800101c:	d824      	bhi.n	8001068 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b05      	subs	r3, #5
 8001030:	221f      	movs	r2, #31
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	400a      	ands	r2, r1
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	3b05      	subs	r3, #5
 800105a:	fa00 f203 	lsl.w	r2, r0, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
 8001066:	e04c      	b.n	8001102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b0c      	cmp	r3, #12
 800106e:	d824      	bhi.n	80010ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	3b23      	subs	r3, #35	@ 0x23
 8001082:	221f      	movs	r2, #31
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43da      	mvns	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	400a      	ands	r2, r1
 8001090:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	b29b      	uxth	r3, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3b23      	subs	r3, #35	@ 0x23
 80010ac:	fa00 f203 	lsl.w	r2, r0, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80010b8:	e023      	b.n	8001102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	3b41      	subs	r3, #65	@ 0x41
 80010cc:	221f      	movs	r2, #31
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	400a      	ands	r2, r1
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	3b41      	subs	r3, #65	@ 0x41
 80010f6:	fa00 f203 	lsl.w	r2, r0, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001102:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <HAL_ADC_ConfigChannel+0x250>)
 8001104:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a28      	ldr	r2, [pc, #160]	@ (80011ac <HAL_ADC_ConfigChannel+0x254>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d10f      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1d8>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b12      	cmp	r3, #18
 8001116:	d10b      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <HAL_ADC_ConfigChannel+0x254>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d12b      	bne.n	8001192 <HAL_ADC_ConfigChannel+0x23a>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1c      	ldr	r2, [pc, #112]	@ (80011b0 <HAL_ADC_ConfigChannel+0x258>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d003      	beq.n	800114c <HAL_ADC_ConfigChannel+0x1f4>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b11      	cmp	r3, #17
 800114a:	d122      	bne.n	8001192 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a11      	ldr	r2, [pc, #68]	@ (80011b0 <HAL_ADC_ConfigChannel+0x258>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d111      	bne.n	8001192 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_ADC_ConfigChannel+0x25c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <HAL_ADC_ConfigChannel+0x260>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	0c9a      	lsrs	r2, r3, #18
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001184:	e002      	b.n	800118c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3b01      	subs	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f9      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40012300 	.word	0x40012300
 80011ac:	40012000 	.word	0x40012000
 80011b0:	10000012 	.word	0x10000012
 80011b4:	20000000 	.word	0x20000000
 80011b8:	431bde83 	.word	0x431bde83

080011bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011c4:	4b79      	ldr	r3, [pc, #484]	@ (80013ac <ADC_Init+0x1f0>)
 80011c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	431a      	orrs	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6859      	ldr	r1, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	021a      	lsls	r2, r3, #8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6859      	ldr	r1, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6899      	ldr	r1, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124e:	4a58      	ldr	r2, [pc, #352]	@ (80013b0 <ADC_Init+0x1f4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d022      	beq.n	800129a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001262:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6899      	ldr	r1, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6899      	ldr	r1, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e00f      	b.n	80012ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0202 	bic.w	r2, r2, #2
 80012c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6899      	ldr	r1, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7e1b      	ldrb	r3, [r3, #24]
 80012d4:	005a      	lsls	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01b      	beq.n	8001320 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001306:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6859      	ldr	r1, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	3b01      	subs	r3, #1
 8001314:	035a      	lsls	r2, r3, #13
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	e007      	b.n	8001330 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800132e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800133e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	3b01      	subs	r3, #1
 800134c:	051a      	lsls	r2, r3, #20
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6899      	ldr	r1, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001372:	025a      	lsls	r2, r3, #9
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800138a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6899      	ldr	r1, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	029a      	lsls	r2, r3, #10
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40012300 	.word	0x40012300
 80013b0:	0f000001 	.word	0x0f000001

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	@ (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	@ (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	@ 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f7ff ff8e 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff47 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001540:	f7ff ff5c 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f7ff ff8e 	bl	800146c <NVIC_EncodePriority>
 8001550:	4602      	mov	r2, r0
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff5d 	bl	8001418 <__NVIC_SetPriority>
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffb0 	bl	80014d4 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	@ 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	e165      	b.n	8001868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f040 8154 	bne.w	8001862 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d005      	beq.n	80015d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d130      	bne.n	8001634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 0201 	and.w	r2, r3, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b03      	cmp	r3, #3
 800163e:	d017      	beq.n	8001670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d123      	bne.n	80016c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	08da      	lsrs	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3208      	adds	r2, #8
 80016be:	69b9      	ldr	r1, [r7, #24]
 80016c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0203 	and.w	r2, r3, #3
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80ae 	beq.w	8001862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b5d      	ldr	r3, [pc, #372]	@ (8001880 <HAL_GPIO_Init+0x300>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	4a5c      	ldr	r2, [pc, #368]	@ (8001880 <HAL_GPIO_Init+0x300>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001714:	6453      	str	r3, [r2, #68]	@ 0x44
 8001716:	4b5a      	ldr	r3, [pc, #360]	@ (8001880 <HAL_GPIO_Init+0x300>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001722:	4a58      	ldr	r2, [pc, #352]	@ (8001884 <HAL_GPIO_Init+0x304>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4f      	ldr	r2, [pc, #316]	@ (8001888 <HAL_GPIO_Init+0x308>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d025      	beq.n	800179a <HAL_GPIO_Init+0x21a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4e      	ldr	r2, [pc, #312]	@ (800188c <HAL_GPIO_Init+0x30c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01f      	beq.n	8001796 <HAL_GPIO_Init+0x216>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4d      	ldr	r2, [pc, #308]	@ (8001890 <HAL_GPIO_Init+0x310>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0x212>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4c      	ldr	r2, [pc, #304]	@ (8001894 <HAL_GPIO_Init+0x314>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x20e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4b      	ldr	r2, [pc, #300]	@ (8001898 <HAL_GPIO_Init+0x318>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x20a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4a      	ldr	r2, [pc, #296]	@ (800189c <HAL_GPIO_Init+0x31c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x206>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a49      	ldr	r2, [pc, #292]	@ (80018a0 <HAL_GPIO_Init+0x320>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x202>
 800177e:	2306      	movs	r3, #6
 8001780:	e00c      	b.n	800179c <HAL_GPIO_Init+0x21c>
 8001782:	2307      	movs	r3, #7
 8001784:	e00a      	b.n	800179c <HAL_GPIO_Init+0x21c>
 8001786:	2305      	movs	r3, #5
 8001788:	e008      	b.n	800179c <HAL_GPIO_Init+0x21c>
 800178a:	2304      	movs	r3, #4
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x21c>
 800178e:	2303      	movs	r3, #3
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x21c>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x21c>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x21c>
 800179a:	2300      	movs	r3, #0
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f002 0203 	and.w	r2, r2, #3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	4093      	lsls	r3, r2
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ac:	4935      	ldr	r1, [pc, #212]	@ (8001884 <HAL_GPIO_Init+0x304>)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ba:	4b3a      	ldr	r3, [pc, #232]	@ (80018a4 <HAL_GPIO_Init+0x324>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017de:	4a31      	ldr	r2, [pc, #196]	@ (80018a4 <HAL_GPIO_Init+0x324>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e4:	4b2f      	ldr	r3, [pc, #188]	@ (80018a4 <HAL_GPIO_Init+0x324>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001808:	4a26      	ldr	r2, [pc, #152]	@ (80018a4 <HAL_GPIO_Init+0x324>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800180e:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <HAL_GPIO_Init+0x324>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001832:	4a1c      	ldr	r2, [pc, #112]	@ (80018a4 <HAL_GPIO_Init+0x324>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <HAL_GPIO_Init+0x324>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800185c:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <HAL_GPIO_Init+0x324>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	2b0f      	cmp	r3, #15
 800186c:	f67f ae96 	bls.w	800159c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3724      	adds	r7, #36	@ 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40013800 	.word	0x40013800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021000 	.word	0x40021000
 800189c:	40021400 	.word	0x40021400
 80018a0:	40021800 	.word	0x40021800
 80018a4:	40013c00 	.word	0x40013c00

080018a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0cc      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018bc:	4b68      	ldr	r3, [pc, #416]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d90c      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b65      	ldr	r3, [pc, #404]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b63      	ldr	r3, [pc, #396]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0b8      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018fc:	4b59      	ldr	r3, [pc, #356]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a58      	ldr	r2, [pc, #352]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001906:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001914:	4b53      	ldr	r3, [pc, #332]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a52      	ldr	r2, [pc, #328]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800191e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b50      	ldr	r3, [pc, #320]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	494d      	ldr	r1, [pc, #308]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d044      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d119      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001962:	2b03      	cmp	r3, #3
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001966:	4b3f      	ldr	r3, [pc, #252]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e06f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001976:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e067      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001986:	4b37      	ldr	r3, [pc, #220]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4934      	ldr	r1, [pc, #208]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001998:	f7ff f900 	bl	8000b9c <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7ff f8fc 	bl	8000b9c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e04f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 020c 	and.w	r2, r3, #12
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1eb      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c8:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d20c      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e032      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4916      	ldr	r1, [pc, #88]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	490e      	ldr	r1, [pc, #56]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2e:	f000 f855 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	490a      	ldr	r1, [pc, #40]	@ (8001a68 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f860 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00
 8001a64:	40023800 	.word	0x40023800
 8001a68:	080034ec 	.word	0x080034ec
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b03      	ldr	r3, [pc, #12]	@ (8001a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000000 	.word	0x20000000

08001a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a90:	f7ff fff0 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4903      	ldr	r1, [pc, #12]	@ (8001ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa2:	5ccb      	ldrb	r3, [r1, r3]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	080034fc 	.word	0x080034fc

08001ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab8:	f7ff ffdc 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0b5b      	lsrs	r3, r3, #13
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4903      	ldr	r1, [pc, #12]	@ (8001ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	080034fc 	.word	0x080034fc

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae0:	b0a6      	sub	sp, #152	@ 0x98
 8001ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b02:	4bc8      	ldr	r3, [pc, #800]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	f200 817e 	bhi.w	8001e0c <HAL_RCC_GetSysClockFreq+0x330>
 8001b10:	a201      	add	r2, pc, #4	@ (adr r2, 8001b18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b4d 	.word	0x08001b4d
 8001b1c:	08001e0d 	.word	0x08001e0d
 8001b20:	08001e0d 	.word	0x08001e0d
 8001b24:	08001e0d 	.word	0x08001e0d
 8001b28:	08001b55 	.word	0x08001b55
 8001b2c:	08001e0d 	.word	0x08001e0d
 8001b30:	08001e0d 	.word	0x08001e0d
 8001b34:	08001e0d 	.word	0x08001e0d
 8001b38:	08001b5d 	.word	0x08001b5d
 8001b3c:	08001e0d 	.word	0x08001e0d
 8001b40:	08001e0d 	.word	0x08001e0d
 8001b44:	08001e0d 	.word	0x08001e0d
 8001b48:	08001cc7 	.word	0x08001cc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4bb6      	ldr	r3, [pc, #728]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b52:	e15f      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b54:	4bb5      	ldr	r3, [pc, #724]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001b56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b5a:	e15b      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b5c:	4bb1      	ldr	r3, [pc, #708]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b68:	4bae      	ldr	r3, [pc, #696]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d031      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b74:	4bab      	ldr	r3, [pc, #684]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b86:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b88:	2300      	movs	r3, #0
 8001b8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b8c:	4ba7      	ldr	r3, [pc, #668]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001b8e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b92:	462a      	mov	r2, r5
 8001b94:	fb03 f202 	mul.w	r2, r3, r2
 8001b98:	2300      	movs	r3, #0
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4aa2      	ldr	r2, [pc, #648]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	fba1 1202 	umull	r1, r2, r1, r2
 8001baa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001bac:	460a      	mov	r2, r1
 8001bae:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001bb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001bb2:	4413      	add	r3, r2
 8001bb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bba:	2200      	movs	r2, #0
 8001bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bbe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001bc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bc4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001bc8:	f7fe fb7a 	bl	80002c0 <__aeabi_uldivmod>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bd6:	e064      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd8:	4b92      	ldr	r3, [pc, #584]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	2200      	movs	r2, #0
 8001be0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001be2:	657a      	str	r2, [r7, #84]	@ 0x54
 8001be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bec:	2300      	movs	r3, #0
 8001bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bf0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	0159      	lsls	r1, r3, #5
 8001c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c06:	0150      	lsls	r0, r2, #5
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	1a51      	subs	r1, r2, r1
 8001c10:	6139      	str	r1, [r7, #16]
 8001c12:	4629      	mov	r1, r5
 8001c14:	eb63 0301 	sbc.w	r3, r3, r1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c26:	4659      	mov	r1, fp
 8001c28:	018b      	lsls	r3, r1, #6
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c30:	4651      	mov	r1, sl
 8001c32:	018a      	lsls	r2, r1, #6
 8001c34:	4651      	mov	r1, sl
 8001c36:	ebb2 0801 	subs.w	r8, r2, r1
 8001c3a:	4659      	mov	r1, fp
 8001c3c:	eb63 0901 	sbc.w	r9, r3, r1
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c54:	4690      	mov	r8, r2
 8001c56:	4699      	mov	r9, r3
 8001c58:	4623      	mov	r3, r4
 8001c5a:	eb18 0303 	adds.w	r3, r8, r3
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	462b      	mov	r3, r5
 8001c62:	eb49 0303 	adc.w	r3, r9, r3
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c74:	4629      	mov	r1, r5
 8001c76:	028b      	lsls	r3, r1, #10
 8001c78:	4621      	mov	r1, r4
 8001c7a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c7e:	4621      	mov	r1, r4
 8001c80:	028a      	lsls	r2, r1, #10
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001c90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c94:	f7fe fb14 	bl	80002c0 <__aeabi_uldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ca2:	4b60      	ldr	r3, [pc, #384]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	0c1b      	lsrs	r3, r3, #16
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	3301      	adds	r3, #1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001cb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cc4:	e0a6      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc6:	4b57      	ldr	r3, [pc, #348]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cd2:	4b54      	ldr	r3, [pc, #336]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d02a      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cde:	4b51      	ldr	r3, [pc, #324]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	099b      	lsrs	r3, r3, #6
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ce8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001cf4:	fb03 f201 	mul.w	r2, r3, r1
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	fb00 f303 	mul.w	r3, r0, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a4a      	ldr	r2, [pc, #296]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8001d02:	fba0 1202 	umull	r1, r2, r0, r2
 8001d06:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d08:	460a      	mov	r2, r1
 8001d0a:	673a      	str	r2, [r7, #112]	@ 0x70
 8001d0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d0e:	4413      	add	r3, r2
 8001d10:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d16:	2200      	movs	r2, #0
 8001d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d1a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d20:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d24:	f7fe facc 	bl	80002c0 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d32:	e05b      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d34:	4b3b      	ldr	r3, [pc, #236]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d50:	4642      	mov	r2, r8
 8001d52:	464b      	mov	r3, r9
 8001d54:	f04f 0000 	mov.w	r0, #0
 8001d58:	f04f 0100 	mov.w	r1, #0
 8001d5c:	0159      	lsls	r1, r3, #5
 8001d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d62:	0150      	lsls	r0, r2, #5
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4641      	mov	r1, r8
 8001d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d6e:	4649      	mov	r1, r9
 8001d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d88:	ebb2 040a 	subs.w	r4, r2, sl
 8001d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	00eb      	lsls	r3, r5, #3
 8001d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d9e:	00e2      	lsls	r2, r4, #3
 8001da0:	4614      	mov	r4, r2
 8001da2:	461d      	mov	r5, r3
 8001da4:	4643      	mov	r3, r8
 8001da6:	18e3      	adds	r3, r4, r3
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	464b      	mov	r3, r9
 8001dac:	eb45 0303 	adc.w	r3, r5, r3
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	028b      	lsls	r3, r1, #10
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc8:	4621      	mov	r1, r4
 8001dca:	028a      	lsls	r2, r1, #10
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	61fa      	str	r2, [r7, #28]
 8001dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dde:	f7fe fa6f 	bl	80002c0 <__aeabi_uldivmod>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4613      	mov	r3, r2
 8001de8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	0f1b      	lsrs	r3, r3, #28
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e0a:	e003      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3798      	adds	r7, #152	@ 0x98
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	017d7840 	.word	0x017d7840

08001e30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e28d      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8083 	beq.w	8001f56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e50:	4b94      	ldr	r3, [pc, #592]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d019      	beq.n	8001e90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e5c:	4b91      	ldr	r3, [pc, #580]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e68:	4b8e      	ldr	r3, [pc, #568]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e74:	d00c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b8b      	ldr	r3, [pc, #556]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d112      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b88      	ldr	r3, [pc, #544]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b84      	ldr	r3, [pc, #528]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x124>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e25a      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x90>
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7b      	ldr	r2, [pc, #492]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xcc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xb4>
 8001eca:	4b76      	ldr	r3, [pc, #472]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a75      	ldr	r2, [pc, #468]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b73      	ldr	r3, [pc, #460]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a72      	ldr	r2, [pc, #456]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xcc>
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe fe4a 	bl	8000b9c <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fe46 	bl	8000b9c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e21f      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b61      	ldr	r3, [pc, #388]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xdc>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fe36 	bl	8000b9c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe fe32 	bl	8000b9c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	@ 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e20b      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	4b57      	ldr	r3, [pc, #348]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x104>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d06f      	beq.n	8002042 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f62:	4b50      	ldr	r3, [pc, #320]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d017      	beq.n	8001f9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b44      	ldr	r3, [pc, #272]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x186>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1d3      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4937      	ldr	r1, [pc, #220]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <HAL_RCC_OscConfig+0x278>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe fddf 	bl	8000b9c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7fe fddb 	bl	8000b9c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e1b4      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4925      	ldr	r1, [pc, #148]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_RCC_OscConfig+0x278>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe fdbe 	bl	8000b9c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002024:	f7fe fdba 	bl	8000b9c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e193      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d036      	beq.n	80020bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_RCC_OscConfig+0x27c>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe fd9e 	bl	8000b9c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002064:	f7fe fd9a 	bl	8000b9c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e173      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x234>
 8002082:	e01b      	b.n	80020bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_OscConfig+0x27c>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7fe fd87 	bl	8000b9c <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	e00e      	b.n	80020b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002092:	f7fe fd83 	bl	8000b9c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d907      	bls.n	80020b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e15c      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000
 80020ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b8a      	ldr	r3, [pc, #552]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ea      	bne.n	8002092 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8097 	beq.w	80021f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b83      	ldr	r3, [pc, #524]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b7f      	ldr	r3, [pc, #508]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a7e      	ldr	r2, [pc, #504]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b7c      	ldr	r3, [pc, #496]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b79      	ldr	r3, [pc, #484]	@ (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b76      	ldr	r3, [pc, #472]	@ (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a75      	ldr	r2, [pc, #468]	@ (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7fe fd43 	bl	8000b9c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7fe fd3f 	bl	8000b9c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e118      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b6c      	ldr	r3, [pc, #432]	@ (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x31e>
 8002140:	4b66      	ldr	r3, [pc, #408]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002144:	4a65      	ldr	r2, [pc, #404]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	@ 0x70
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x358>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x340>
 8002156:	4b61      	ldr	r3, [pc, #388]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	4a60      	ldr	r2, [pc, #384]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	@ 0x70
 8002162:	4b5e      	ldr	r3, [pc, #376]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002166:	4a5d      	ldr	r2, [pc, #372]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	@ 0x70
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x358>
 8002170:	4b5a      	ldr	r3, [pc, #360]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	4a59      	ldr	r2, [pc, #356]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	@ 0x70
 800217c:	4b57      	ldr	r3, [pc, #348]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002180:	4a56      	ldr	r2, [pc, #344]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7fe fd04 	bl	8000b9c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe fd00 	bl	8000b9c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0d7      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	4b4b      	ldr	r3, [pc, #300]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <HAL_RCC_OscConfig+0x368>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7fe fcee 	bl	8000b9c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7fe fcea 	bl	8000b9c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0c1      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	4b40      	ldr	r3, [pc, #256]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ee      	bne.n	80021c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	4a3a      	ldr	r2, [pc, #232]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80ad 	beq.w	800235c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002202:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d060      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d145      	bne.n	80022a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b33      	ldr	r3, [pc, #204]	@ (80022e4 <HAL_RCC_OscConfig+0x4b4>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fcbe 	bl	8000b9c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fcba 	bl	8000b9c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e093      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b29      	ldr	r3, [pc, #164]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	071b      	lsls	r3, r3, #28
 800226e:	491b      	ldr	r1, [pc, #108]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <HAL_RCC_OscConfig+0x4b4>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fc8f 	bl	8000b9c <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7fe fc8b 	bl	8000b9c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e064      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x452>
 80022a0:	e05c      	b.n	800235c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <HAL_RCC_OscConfig+0x4b4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fc78 	bl	8000b9c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fc74 	bl	8000b9c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e04d      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x480>
 80022ce:	e045      	b.n	800235c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e040      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40007000 	.word	0x40007000
 80022e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <HAL_RCC_OscConfig+0x538>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d030      	beq.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d129      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d122      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002318:	4013      	ands	r3, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800231e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002320:	4293      	cmp	r3, r2
 8002322:	d119      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	3b01      	subs	r3, #1
 8002332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d10f      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800

0800236c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e042      	b.n	8002404 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fab2 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2224      	movs	r2, #36	@ 0x24
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f973 	bl	800269c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b20      	cmp	r3, #32
 800242a:	d175      	bne.n	8002518 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_UART_Transmit+0x2c>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e06e      	b.n	800251a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2221      	movs	r2, #33	@ 0x21
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800244a:	f7fe fba7 	bl	8000b9c <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	88fa      	ldrh	r2, [r7, #6]
 800245a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002464:	d108      	bne.n	8002478 <HAL_UART_Transmit+0x6c>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d104      	bne.n	8002478 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	e003      	b.n	8002480 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002480:	e02e      	b.n	80024e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	@ 0x80
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f848 	bl	8002522 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e03a      	b.n	800251a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10b      	bne.n	80024c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	3302      	adds	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e007      	b.n	80024d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	3301      	adds	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1cb      	bne.n	8002482 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2200      	movs	r2, #0
 80024f2:	2140      	movs	r1, #64	@ 0x40
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f814 	bl	8002522 <UART_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	4613      	mov	r3, r2
 8002530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002532:	e03b      	b.n	80025ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d037      	beq.n	80025ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253c:	f7fe fb2e 	bl	8000b9c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	6a3a      	ldr	r2, [r7, #32]
 8002548:	429a      	cmp	r2, r3
 800254a:	d302      	bcc.n	8002552 <UART_WaitOnFlagUntilTimeout+0x30>
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e03a      	b.n	80025cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d023      	beq.n	80025ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b80      	cmp	r3, #128	@ 0x80
 8002568:	d020      	beq.n	80025ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b40      	cmp	r3, #64	@ 0x40
 800256e:	d01d      	beq.n	80025ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b08      	cmp	r3, #8
 800257c:	d116      	bne.n	80025ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f81d 	bl	80025d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2208      	movs	r2, #8
 800259e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e00f      	b.n	80025cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d0b4      	beq.n	8002534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b095      	sub	sp, #84	@ 0x54
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e6:	e853 3f00 	ldrex	r3, [r3]
 80025ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80025fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002602:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800260a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e5      	bne.n	80025dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3314      	adds	r3, #20
 8002616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	e853 3f00 	ldrex	r3, [r3]
 800261e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3314      	adds	r3, #20
 800262e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002630:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002638:	e841 2300 	strex	r3, r2, [r1]
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e5      	bne.n	8002610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	2b01      	cmp	r3, #1
 800264a:	d119      	bne.n	8002680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	60bb      	str	r3, [r7, #8]
   return(result);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f023 0310 	bic.w	r3, r3, #16
 8002662:	647b      	str	r3, [r7, #68]	@ 0x44
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	330c      	adds	r3, #12
 800266a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800266c:	61ba      	str	r2, [r7, #24]
 800266e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	6979      	ldr	r1, [r7, #20]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	613b      	str	r3, [r7, #16]
   return(result);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e5      	bne.n	800264c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800268e:	bf00      	nop
 8002690:	3754      	adds	r7, #84	@ 0x54
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800269c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a0:	b0c0      	sub	sp, #256	@ 0x100
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b8:	68d9      	ldr	r1, [r3, #12]
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	ea40 0301 	orr.w	r3, r0, r1
 80026c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	431a      	orrs	r2, r3
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026f4:	f021 010c 	bic.w	r1, r1, #12
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002702:	430b      	orrs	r3, r1
 8002704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002716:	6999      	ldr	r1, [r3, #24]
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	ea40 0301 	orr.w	r3, r0, r1
 8002722:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4b8f      	ldr	r3, [pc, #572]	@ (8002968 <UART_SetConfig+0x2cc>)
 800272c:	429a      	cmp	r2, r3
 800272e:	d005      	beq.n	800273c <UART_SetConfig+0xa0>
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b8d      	ldr	r3, [pc, #564]	@ (800296c <UART_SetConfig+0x2d0>)
 8002738:	429a      	cmp	r2, r3
 800273a:	d104      	bne.n	8002746 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800273c:	f7ff f9ba 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 8002740:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002744:	e003      	b.n	800274e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002746:	f7ff f9a1 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 800274a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800274e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002758:	f040 810c 	bne.w	8002974 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800275c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002760:	2200      	movs	r2, #0
 8002762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002766:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800276a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800276e:	4622      	mov	r2, r4
 8002770:	462b      	mov	r3, r5
 8002772:	1891      	adds	r1, r2, r2
 8002774:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002776:	415b      	adcs	r3, r3
 8002778:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800277a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800277e:	4621      	mov	r1, r4
 8002780:	eb12 0801 	adds.w	r8, r2, r1
 8002784:	4629      	mov	r1, r5
 8002786:	eb43 0901 	adc.w	r9, r3, r1
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800279a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800279e:	4690      	mov	r8, r2
 80027a0:	4699      	mov	r9, r3
 80027a2:	4623      	mov	r3, r4
 80027a4:	eb18 0303 	adds.w	r3, r8, r3
 80027a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027ac:	462b      	mov	r3, r5
 80027ae:	eb49 0303 	adc.w	r3, r9, r3
 80027b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027ca:	460b      	mov	r3, r1
 80027cc:	18db      	adds	r3, r3, r3
 80027ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80027d0:	4613      	mov	r3, r2
 80027d2:	eb42 0303 	adc.w	r3, r2, r3
 80027d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80027d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027e0:	f7fd fd6e 	bl	80002c0 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4b61      	ldr	r3, [pc, #388]	@ (8002970 <UART_SetConfig+0x2d4>)
 80027ea:	fba3 2302 	umull	r2, r3, r3, r2
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	011c      	lsls	r4, r3, #4
 80027f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002800:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002804:	4642      	mov	r2, r8
 8002806:	464b      	mov	r3, r9
 8002808:	1891      	adds	r1, r2, r2
 800280a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800280c:	415b      	adcs	r3, r3
 800280e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002814:	4641      	mov	r1, r8
 8002816:	eb12 0a01 	adds.w	sl, r2, r1
 800281a:	4649      	mov	r1, r9
 800281c:	eb43 0b01 	adc.w	fp, r3, r1
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800282c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002834:	4692      	mov	sl, r2
 8002836:	469b      	mov	fp, r3
 8002838:	4643      	mov	r3, r8
 800283a:	eb1a 0303 	adds.w	r3, sl, r3
 800283e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002842:	464b      	mov	r3, r9
 8002844:	eb4b 0303 	adc.w	r3, fp, r3
 8002848:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002858:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800285c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002860:	460b      	mov	r3, r1
 8002862:	18db      	adds	r3, r3, r3
 8002864:	643b      	str	r3, [r7, #64]	@ 0x40
 8002866:	4613      	mov	r3, r2
 8002868:	eb42 0303 	adc.w	r3, r2, r3
 800286c:	647b      	str	r3, [r7, #68]	@ 0x44
 800286e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002876:	f7fd fd23 	bl	80002c0 <__aeabi_uldivmod>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4611      	mov	r1, r2
 8002880:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <UART_SetConfig+0x2d4>)
 8002882:	fba3 2301 	umull	r2, r3, r3, r1
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2264      	movs	r2, #100	@ 0x64
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	1acb      	subs	r3, r1, r3
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002896:	4b36      	ldr	r3, [pc, #216]	@ (8002970 <UART_SetConfig+0x2d4>)
 8002898:	fba3 2302 	umull	r2, r3, r3, r2
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028a4:	441c      	add	r4, r3
 80028a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028b8:	4642      	mov	r2, r8
 80028ba:	464b      	mov	r3, r9
 80028bc:	1891      	adds	r1, r2, r2
 80028be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028c0:	415b      	adcs	r3, r3
 80028c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028c8:	4641      	mov	r1, r8
 80028ca:	1851      	adds	r1, r2, r1
 80028cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80028ce:	4649      	mov	r1, r9
 80028d0:	414b      	adcs	r3, r1
 80028d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028e0:	4659      	mov	r1, fp
 80028e2:	00cb      	lsls	r3, r1, #3
 80028e4:	4651      	mov	r1, sl
 80028e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ea:	4651      	mov	r1, sl
 80028ec:	00ca      	lsls	r2, r1, #3
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	4642      	mov	r2, r8
 80028f6:	189b      	adds	r3, r3, r2
 80028f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028fc:	464b      	mov	r3, r9
 80028fe:	460a      	mov	r2, r1
 8002900:	eb42 0303 	adc.w	r3, r2, r3
 8002904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002914:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800291c:	460b      	mov	r3, r1
 800291e:	18db      	adds	r3, r3, r3
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002922:	4613      	mov	r3, r2
 8002924:	eb42 0303 	adc.w	r3, r2, r3
 8002928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800292a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800292e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002932:	f7fd fcc5 	bl	80002c0 <__aeabi_uldivmod>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <UART_SetConfig+0x2d4>)
 800293c:	fba3 1302 	umull	r1, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	2164      	movs	r1, #100	@ 0x64
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	3332      	adds	r3, #50	@ 0x32
 800294e:	4a08      	ldr	r2, [pc, #32]	@ (8002970 <UART_SetConfig+0x2d4>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	f003 0207 	and.w	r2, r3, #7
 800295a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4422      	add	r2, r4
 8002962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002964:	e106      	b.n	8002b74 <UART_SetConfig+0x4d8>
 8002966:	bf00      	nop
 8002968:	40011000 	.word	0x40011000
 800296c:	40011400 	.word	0x40011400
 8002970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002978:	2200      	movs	r2, #0
 800297a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800297e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002986:	4642      	mov	r2, r8
 8002988:	464b      	mov	r3, r9
 800298a:	1891      	adds	r1, r2, r2
 800298c:	6239      	str	r1, [r7, #32]
 800298e:	415b      	adcs	r3, r3
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
 8002992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002996:	4641      	mov	r1, r8
 8002998:	1854      	adds	r4, r2, r1
 800299a:	4649      	mov	r1, r9
 800299c:	eb43 0501 	adc.w	r5, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	00eb      	lsls	r3, r5, #3
 80029aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ae:	00e2      	lsls	r2, r4, #3
 80029b0:	4614      	mov	r4, r2
 80029b2:	461d      	mov	r5, r3
 80029b4:	4643      	mov	r3, r8
 80029b6:	18e3      	adds	r3, r4, r3
 80029b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029bc:	464b      	mov	r3, r9
 80029be:	eb45 0303 	adc.w	r3, r5, r3
 80029c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029e2:	4629      	mov	r1, r5
 80029e4:	008b      	lsls	r3, r1, #2
 80029e6:	4621      	mov	r1, r4
 80029e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ec:	4621      	mov	r1, r4
 80029ee:	008a      	lsls	r2, r1, #2
 80029f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029f4:	f7fd fc64 	bl	80002c0 <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4b60      	ldr	r3, [pc, #384]	@ (8002b80 <UART_SetConfig+0x4e4>)
 80029fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	011c      	lsls	r4, r3, #4
 8002a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a18:	4642      	mov	r2, r8
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	1891      	adds	r1, r2, r2
 8002a1e:	61b9      	str	r1, [r7, #24]
 8002a20:	415b      	adcs	r3, r3
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a28:	4641      	mov	r1, r8
 8002a2a:	1851      	adds	r1, r2, r1
 8002a2c:	6139      	str	r1, [r7, #16]
 8002a2e:	4649      	mov	r1, r9
 8002a30:	414b      	adcs	r3, r1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a40:	4659      	mov	r1, fp
 8002a42:	00cb      	lsls	r3, r1, #3
 8002a44:	4651      	mov	r1, sl
 8002a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a4a:	4651      	mov	r1, sl
 8002a4c:	00ca      	lsls	r2, r1, #3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	4642      	mov	r2, r8
 8002a56:	189b      	adds	r3, r3, r2
 8002a58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a5c:	464b      	mov	r3, r9
 8002a5e:	460a      	mov	r2, r1
 8002a60:	eb42 0303 	adc.w	r3, r2, r3
 8002a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a80:	4649      	mov	r1, r9
 8002a82:	008b      	lsls	r3, r1, #2
 8002a84:	4641      	mov	r1, r8
 8002a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a8a:	4641      	mov	r1, r8
 8002a8c:	008a      	lsls	r2, r1, #2
 8002a8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a92:	f7fd fc15 	bl	80002c0 <__aeabi_uldivmod>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4b38      	ldr	r3, [pc, #224]	@ (8002b80 <UART_SetConfig+0x4e4>)
 8002a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2264      	movs	r2, #100	@ 0x64
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	1acb      	subs	r3, r1, r3
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	3332      	adds	r3, #50	@ 0x32
 8002ab0:	4a33      	ldr	r2, [pc, #204]	@ (8002b80 <UART_SetConfig+0x4e4>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002abc:	441c      	add	r4, r3
 8002abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ac6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ac8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002acc:	4642      	mov	r2, r8
 8002ace:	464b      	mov	r3, r9
 8002ad0:	1891      	adds	r1, r2, r2
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	415b      	adcs	r3, r3
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002adc:	4641      	mov	r1, r8
 8002ade:	1851      	adds	r1, r2, r1
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	4649      	mov	r1, r9
 8002ae4:	414b      	adcs	r3, r1
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002af4:	4659      	mov	r1, fp
 8002af6:	00cb      	lsls	r3, r1, #3
 8002af8:	4651      	mov	r1, sl
 8002afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002afe:	4651      	mov	r1, sl
 8002b00:	00ca      	lsls	r2, r1, #3
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	4642      	mov	r2, r8
 8002b0a:	189b      	adds	r3, r3, r2
 8002b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b0e:	464b      	mov	r3, r9
 8002b10:	460a      	mov	r2, r1
 8002b12:	eb42 0303 	adc.w	r3, r2, r3
 8002b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b22:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b30:	4649      	mov	r1, r9
 8002b32:	008b      	lsls	r3, r1, #2
 8002b34:	4641      	mov	r1, r8
 8002b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b3a:	4641      	mov	r1, r8
 8002b3c:	008a      	lsls	r2, r1, #2
 8002b3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b42:	f7fd fbbd 	bl	80002c0 <__aeabi_uldivmod>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <UART_SetConfig+0x4e4>)
 8002b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	2164      	movs	r1, #100	@ 0x64
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	3332      	adds	r3, #50	@ 0x32
 8002b5e:	4a08      	ldr	r2, [pc, #32]	@ (8002b80 <UART_SetConfig+0x4e4>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4422      	add	r2, r4
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	bf00      	nop
 8002b76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b80:	51eb851f 	.word	0x51eb851f

08002b84 <siprintf>:
 8002b84:	b40e      	push	{r1, r2, r3}
 8002b86:	b500      	push	{lr}
 8002b88:	b09c      	sub	sp, #112	@ 0x70
 8002b8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b8c:	9002      	str	r0, [sp, #8]
 8002b8e:	9006      	str	r0, [sp, #24]
 8002b90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b94:	4809      	ldr	r0, [pc, #36]	@ (8002bbc <siprintf+0x38>)
 8002b96:	9107      	str	r1, [sp, #28]
 8002b98:	9104      	str	r1, [sp, #16]
 8002b9a:	4909      	ldr	r1, [pc, #36]	@ (8002bc0 <siprintf+0x3c>)
 8002b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ba0:	9105      	str	r1, [sp, #20]
 8002ba2:	6800      	ldr	r0, [r0, #0]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	a902      	add	r1, sp, #8
 8002ba8:	f000 f994 	bl	8002ed4 <_svfiprintf_r>
 8002bac:	9b02      	ldr	r3, [sp, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	b01c      	add	sp, #112	@ 0x70
 8002bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bb8:	b003      	add	sp, #12
 8002bba:	4770      	bx	lr
 8002bbc:	2000000c 	.word	0x2000000c
 8002bc0:	ffff0208 	.word	0xffff0208

08002bc4 <memset>:
 8002bc4:	4402      	add	r2, r0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d100      	bne.n	8002bce <memset+0xa>
 8002bcc:	4770      	bx	lr
 8002bce:	f803 1b01 	strb.w	r1, [r3], #1
 8002bd2:	e7f9      	b.n	8002bc8 <memset+0x4>

08002bd4 <__errno>:
 8002bd4:	4b01      	ldr	r3, [pc, #4]	@ (8002bdc <__errno+0x8>)
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	2000000c 	.word	0x2000000c

08002be0 <__libc_init_array>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	4d0d      	ldr	r5, [pc, #52]	@ (8002c18 <__libc_init_array+0x38>)
 8002be4:	4c0d      	ldr	r4, [pc, #52]	@ (8002c1c <__libc_init_array+0x3c>)
 8002be6:	1b64      	subs	r4, r4, r5
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	2600      	movs	r6, #0
 8002bec:	42a6      	cmp	r6, r4
 8002bee:	d109      	bne.n	8002c04 <__libc_init_array+0x24>
 8002bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8002c20 <__libc_init_array+0x40>)
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8002c24 <__libc_init_array+0x44>)
 8002bf4:	f000 fc66 	bl	80034c4 <_init>
 8002bf8:	1b64      	subs	r4, r4, r5
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	2600      	movs	r6, #0
 8002bfe:	42a6      	cmp	r6, r4
 8002c00:	d105      	bne.n	8002c0e <__libc_init_array+0x2e>
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c08:	4798      	blx	r3
 8002c0a:	3601      	adds	r6, #1
 8002c0c:	e7ee      	b.n	8002bec <__libc_init_array+0xc>
 8002c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c12:	4798      	blx	r3
 8002c14:	3601      	adds	r6, #1
 8002c16:	e7f2      	b.n	8002bfe <__libc_init_array+0x1e>
 8002c18:	08003540 	.word	0x08003540
 8002c1c:	08003540 	.word	0x08003540
 8002c20:	08003540 	.word	0x08003540
 8002c24:	08003544 	.word	0x08003544

08002c28 <__retarget_lock_acquire_recursive>:
 8002c28:	4770      	bx	lr

08002c2a <__retarget_lock_release_recursive>:
 8002c2a:	4770      	bx	lr

08002c2c <_free_r>:
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	4605      	mov	r5, r0
 8002c30:	2900      	cmp	r1, #0
 8002c32:	d041      	beq.n	8002cb8 <_free_r+0x8c>
 8002c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c38:	1f0c      	subs	r4, r1, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bfb8      	it	lt
 8002c3e:	18e4      	addlt	r4, r4, r3
 8002c40:	f000 f8e0 	bl	8002e04 <__malloc_lock>
 8002c44:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <_free_r+0x90>)
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	b933      	cbnz	r3, 8002c58 <_free_r+0x2c>
 8002c4a:	6063      	str	r3, [r4, #4]
 8002c4c:	6014      	str	r4, [r2, #0]
 8002c4e:	4628      	mov	r0, r5
 8002c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c54:	f000 b8dc 	b.w	8002e10 <__malloc_unlock>
 8002c58:	42a3      	cmp	r3, r4
 8002c5a:	d908      	bls.n	8002c6e <_free_r+0x42>
 8002c5c:	6820      	ldr	r0, [r4, #0]
 8002c5e:	1821      	adds	r1, r4, r0
 8002c60:	428b      	cmp	r3, r1
 8002c62:	bf01      	itttt	eq
 8002c64:	6819      	ldreq	r1, [r3, #0]
 8002c66:	685b      	ldreq	r3, [r3, #4]
 8002c68:	1809      	addeq	r1, r1, r0
 8002c6a:	6021      	streq	r1, [r4, #0]
 8002c6c:	e7ed      	b.n	8002c4a <_free_r+0x1e>
 8002c6e:	461a      	mov	r2, r3
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	b10b      	cbz	r3, 8002c78 <_free_r+0x4c>
 8002c74:	42a3      	cmp	r3, r4
 8002c76:	d9fa      	bls.n	8002c6e <_free_r+0x42>
 8002c78:	6811      	ldr	r1, [r2, #0]
 8002c7a:	1850      	adds	r0, r2, r1
 8002c7c:	42a0      	cmp	r0, r4
 8002c7e:	d10b      	bne.n	8002c98 <_free_r+0x6c>
 8002c80:	6820      	ldr	r0, [r4, #0]
 8002c82:	4401      	add	r1, r0
 8002c84:	1850      	adds	r0, r2, r1
 8002c86:	4283      	cmp	r3, r0
 8002c88:	6011      	str	r1, [r2, #0]
 8002c8a:	d1e0      	bne.n	8002c4e <_free_r+0x22>
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	6053      	str	r3, [r2, #4]
 8002c92:	4408      	add	r0, r1
 8002c94:	6010      	str	r0, [r2, #0]
 8002c96:	e7da      	b.n	8002c4e <_free_r+0x22>
 8002c98:	d902      	bls.n	8002ca0 <_free_r+0x74>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	602b      	str	r3, [r5, #0]
 8002c9e:	e7d6      	b.n	8002c4e <_free_r+0x22>
 8002ca0:	6820      	ldr	r0, [r4, #0]
 8002ca2:	1821      	adds	r1, r4, r0
 8002ca4:	428b      	cmp	r3, r1
 8002ca6:	bf04      	itt	eq
 8002ca8:	6819      	ldreq	r1, [r3, #0]
 8002caa:	685b      	ldreq	r3, [r3, #4]
 8002cac:	6063      	str	r3, [r4, #4]
 8002cae:	bf04      	itt	eq
 8002cb0:	1809      	addeq	r1, r1, r0
 8002cb2:	6021      	streq	r1, [r4, #0]
 8002cb4:	6054      	str	r4, [r2, #4]
 8002cb6:	e7ca      	b.n	8002c4e <_free_r+0x22>
 8002cb8:	bd38      	pop	{r3, r4, r5, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000028c 	.word	0x2000028c

08002cc0 <sbrk_aligned>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	4e0f      	ldr	r6, [pc, #60]	@ (8002d00 <sbrk_aligned+0x40>)
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	6831      	ldr	r1, [r6, #0]
 8002cc8:	4605      	mov	r5, r0
 8002cca:	b911      	cbnz	r1, 8002cd2 <sbrk_aligned+0x12>
 8002ccc:	f000 fba6 	bl	800341c <_sbrk_r>
 8002cd0:	6030      	str	r0, [r6, #0]
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f000 fba1 	bl	800341c <_sbrk_r>
 8002cda:	1c43      	adds	r3, r0, #1
 8002cdc:	d103      	bne.n	8002ce6 <sbrk_aligned+0x26>
 8002cde:	f04f 34ff 	mov.w	r4, #4294967295
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	bd70      	pop	{r4, r5, r6, pc}
 8002ce6:	1cc4      	adds	r4, r0, #3
 8002ce8:	f024 0403 	bic.w	r4, r4, #3
 8002cec:	42a0      	cmp	r0, r4
 8002cee:	d0f8      	beq.n	8002ce2 <sbrk_aligned+0x22>
 8002cf0:	1a21      	subs	r1, r4, r0
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	f000 fb92 	bl	800341c <_sbrk_r>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d1f2      	bne.n	8002ce2 <sbrk_aligned+0x22>
 8002cfc:	e7ef      	b.n	8002cde <sbrk_aligned+0x1e>
 8002cfe:	bf00      	nop
 8002d00:	20000288 	.word	0x20000288

08002d04 <_malloc_r>:
 8002d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d08:	1ccd      	adds	r5, r1, #3
 8002d0a:	f025 0503 	bic.w	r5, r5, #3
 8002d0e:	3508      	adds	r5, #8
 8002d10:	2d0c      	cmp	r5, #12
 8002d12:	bf38      	it	cc
 8002d14:	250c      	movcc	r5, #12
 8002d16:	2d00      	cmp	r5, #0
 8002d18:	4606      	mov	r6, r0
 8002d1a:	db01      	blt.n	8002d20 <_malloc_r+0x1c>
 8002d1c:	42a9      	cmp	r1, r5
 8002d1e:	d904      	bls.n	8002d2a <_malloc_r+0x26>
 8002d20:	230c      	movs	r3, #12
 8002d22:	6033      	str	r3, [r6, #0]
 8002d24:	2000      	movs	r0, #0
 8002d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e00 <_malloc_r+0xfc>
 8002d2e:	f000 f869 	bl	8002e04 <__malloc_lock>
 8002d32:	f8d8 3000 	ldr.w	r3, [r8]
 8002d36:	461c      	mov	r4, r3
 8002d38:	bb44      	cbnz	r4, 8002d8c <_malloc_r+0x88>
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	f7ff ffbf 	bl	8002cc0 <sbrk_aligned>
 8002d42:	1c43      	adds	r3, r0, #1
 8002d44:	4604      	mov	r4, r0
 8002d46:	d158      	bne.n	8002dfa <_malloc_r+0xf6>
 8002d48:	f8d8 4000 	ldr.w	r4, [r8]
 8002d4c:	4627      	mov	r7, r4
 8002d4e:	2f00      	cmp	r7, #0
 8002d50:	d143      	bne.n	8002dda <_malloc_r+0xd6>
 8002d52:	2c00      	cmp	r4, #0
 8002d54:	d04b      	beq.n	8002dee <_malloc_r+0xea>
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	4639      	mov	r1, r7
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	eb04 0903 	add.w	r9, r4, r3
 8002d60:	f000 fb5c 	bl	800341c <_sbrk_r>
 8002d64:	4581      	cmp	r9, r0
 8002d66:	d142      	bne.n	8002dee <_malloc_r+0xea>
 8002d68:	6821      	ldr	r1, [r4, #0]
 8002d6a:	1a6d      	subs	r5, r5, r1
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	4630      	mov	r0, r6
 8002d70:	f7ff ffa6 	bl	8002cc0 <sbrk_aligned>
 8002d74:	3001      	adds	r0, #1
 8002d76:	d03a      	beq.n	8002dee <_malloc_r+0xea>
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	442b      	add	r3, r5
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	bb62      	cbnz	r2, 8002de0 <_malloc_r+0xdc>
 8002d86:	f8c8 7000 	str.w	r7, [r8]
 8002d8a:	e00f      	b.n	8002dac <_malloc_r+0xa8>
 8002d8c:	6822      	ldr	r2, [r4, #0]
 8002d8e:	1b52      	subs	r2, r2, r5
 8002d90:	d420      	bmi.n	8002dd4 <_malloc_r+0xd0>
 8002d92:	2a0b      	cmp	r2, #11
 8002d94:	d917      	bls.n	8002dc6 <_malloc_r+0xc2>
 8002d96:	1961      	adds	r1, r4, r5
 8002d98:	42a3      	cmp	r3, r4
 8002d9a:	6025      	str	r5, [r4, #0]
 8002d9c:	bf18      	it	ne
 8002d9e:	6059      	strne	r1, [r3, #4]
 8002da0:	6863      	ldr	r3, [r4, #4]
 8002da2:	bf08      	it	eq
 8002da4:	f8c8 1000 	streq.w	r1, [r8]
 8002da8:	5162      	str	r2, [r4, r5]
 8002daa:	604b      	str	r3, [r1, #4]
 8002dac:	4630      	mov	r0, r6
 8002dae:	f000 f82f 	bl	8002e10 <__malloc_unlock>
 8002db2:	f104 000b 	add.w	r0, r4, #11
 8002db6:	1d23      	adds	r3, r4, #4
 8002db8:	f020 0007 	bic.w	r0, r0, #7
 8002dbc:	1ac2      	subs	r2, r0, r3
 8002dbe:	bf1c      	itt	ne
 8002dc0:	1a1b      	subne	r3, r3, r0
 8002dc2:	50a3      	strne	r3, [r4, r2]
 8002dc4:	e7af      	b.n	8002d26 <_malloc_r+0x22>
 8002dc6:	6862      	ldr	r2, [r4, #4]
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	bf0c      	ite	eq
 8002dcc:	f8c8 2000 	streq.w	r2, [r8]
 8002dd0:	605a      	strne	r2, [r3, #4]
 8002dd2:	e7eb      	b.n	8002dac <_malloc_r+0xa8>
 8002dd4:	4623      	mov	r3, r4
 8002dd6:	6864      	ldr	r4, [r4, #4]
 8002dd8:	e7ae      	b.n	8002d38 <_malloc_r+0x34>
 8002dda:	463c      	mov	r4, r7
 8002ddc:	687f      	ldr	r7, [r7, #4]
 8002dde:	e7b6      	b.n	8002d4e <_malloc_r+0x4a>
 8002de0:	461a      	mov	r2, r3
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	42a3      	cmp	r3, r4
 8002de6:	d1fb      	bne.n	8002de0 <_malloc_r+0xdc>
 8002de8:	2300      	movs	r3, #0
 8002dea:	6053      	str	r3, [r2, #4]
 8002dec:	e7de      	b.n	8002dac <_malloc_r+0xa8>
 8002dee:	230c      	movs	r3, #12
 8002df0:	6033      	str	r3, [r6, #0]
 8002df2:	4630      	mov	r0, r6
 8002df4:	f000 f80c 	bl	8002e10 <__malloc_unlock>
 8002df8:	e794      	b.n	8002d24 <_malloc_r+0x20>
 8002dfa:	6005      	str	r5, [r0, #0]
 8002dfc:	e7d6      	b.n	8002dac <_malloc_r+0xa8>
 8002dfe:	bf00      	nop
 8002e00:	2000028c 	.word	0x2000028c

08002e04 <__malloc_lock>:
 8002e04:	4801      	ldr	r0, [pc, #4]	@ (8002e0c <__malloc_lock+0x8>)
 8002e06:	f7ff bf0f 	b.w	8002c28 <__retarget_lock_acquire_recursive>
 8002e0a:	bf00      	nop
 8002e0c:	20000284 	.word	0x20000284

08002e10 <__malloc_unlock>:
 8002e10:	4801      	ldr	r0, [pc, #4]	@ (8002e18 <__malloc_unlock+0x8>)
 8002e12:	f7ff bf0a 	b.w	8002c2a <__retarget_lock_release_recursive>
 8002e16:	bf00      	nop
 8002e18:	20000284 	.word	0x20000284

08002e1c <__ssputs_r>:
 8002e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e20:	688e      	ldr	r6, [r1, #8]
 8002e22:	461f      	mov	r7, r3
 8002e24:	42be      	cmp	r6, r7
 8002e26:	680b      	ldr	r3, [r1, #0]
 8002e28:	4682      	mov	sl, r0
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	4690      	mov	r8, r2
 8002e2e:	d82d      	bhi.n	8002e8c <__ssputs_r+0x70>
 8002e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e38:	d026      	beq.n	8002e88 <__ssputs_r+0x6c>
 8002e3a:	6965      	ldr	r5, [r4, #20]
 8002e3c:	6909      	ldr	r1, [r1, #16]
 8002e3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e42:	eba3 0901 	sub.w	r9, r3, r1
 8002e46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e4a:	1c7b      	adds	r3, r7, #1
 8002e4c:	444b      	add	r3, r9
 8002e4e:	106d      	asrs	r5, r5, #1
 8002e50:	429d      	cmp	r5, r3
 8002e52:	bf38      	it	cc
 8002e54:	461d      	movcc	r5, r3
 8002e56:	0553      	lsls	r3, r2, #21
 8002e58:	d527      	bpl.n	8002eaa <__ssputs_r+0x8e>
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	f7ff ff52 	bl	8002d04 <_malloc_r>
 8002e60:	4606      	mov	r6, r0
 8002e62:	b360      	cbz	r0, 8002ebe <__ssputs_r+0xa2>
 8002e64:	6921      	ldr	r1, [r4, #16]
 8002e66:	464a      	mov	r2, r9
 8002e68:	f000 fae8 	bl	800343c <memcpy>
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e76:	81a3      	strh	r3, [r4, #12]
 8002e78:	6126      	str	r6, [r4, #16]
 8002e7a:	6165      	str	r5, [r4, #20]
 8002e7c:	444e      	add	r6, r9
 8002e7e:	eba5 0509 	sub.w	r5, r5, r9
 8002e82:	6026      	str	r6, [r4, #0]
 8002e84:	60a5      	str	r5, [r4, #8]
 8002e86:	463e      	mov	r6, r7
 8002e88:	42be      	cmp	r6, r7
 8002e8a:	d900      	bls.n	8002e8e <__ssputs_r+0x72>
 8002e8c:	463e      	mov	r6, r7
 8002e8e:	6820      	ldr	r0, [r4, #0]
 8002e90:	4632      	mov	r2, r6
 8002e92:	4641      	mov	r1, r8
 8002e94:	f000 faa8 	bl	80033e8 <memmove>
 8002e98:	68a3      	ldr	r3, [r4, #8]
 8002e9a:	1b9b      	subs	r3, r3, r6
 8002e9c:	60a3      	str	r3, [r4, #8]
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	4433      	add	r3, r6
 8002ea2:	6023      	str	r3, [r4, #0]
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eaa:	462a      	mov	r2, r5
 8002eac:	f000 fad4 	bl	8003458 <_realloc_r>
 8002eb0:	4606      	mov	r6, r0
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d1e0      	bne.n	8002e78 <__ssputs_r+0x5c>
 8002eb6:	6921      	ldr	r1, [r4, #16]
 8002eb8:	4650      	mov	r0, sl
 8002eba:	f7ff feb7 	bl	8002c2c <_free_r>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	f8ca 3000 	str.w	r3, [sl]
 8002ec4:	89a3      	ldrh	r3, [r4, #12]
 8002ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	e7e9      	b.n	8002ea6 <__ssputs_r+0x8a>
	...

08002ed4 <_svfiprintf_r>:
 8002ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed8:	4698      	mov	r8, r3
 8002eda:	898b      	ldrh	r3, [r1, #12]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	b09d      	sub	sp, #116	@ 0x74
 8002ee0:	4607      	mov	r7, r0
 8002ee2:	460d      	mov	r5, r1
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	d510      	bpl.n	8002f0a <_svfiprintf_r+0x36>
 8002ee8:	690b      	ldr	r3, [r1, #16]
 8002eea:	b973      	cbnz	r3, 8002f0a <_svfiprintf_r+0x36>
 8002eec:	2140      	movs	r1, #64	@ 0x40
 8002eee:	f7ff ff09 	bl	8002d04 <_malloc_r>
 8002ef2:	6028      	str	r0, [r5, #0]
 8002ef4:	6128      	str	r0, [r5, #16]
 8002ef6:	b930      	cbnz	r0, 8002f06 <_svfiprintf_r+0x32>
 8002ef8:	230c      	movs	r3, #12
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	b01d      	add	sp, #116	@ 0x74
 8002f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f06:	2340      	movs	r3, #64	@ 0x40
 8002f08:	616b      	str	r3, [r5, #20]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f0e:	2320      	movs	r3, #32
 8002f10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f18:	2330      	movs	r3, #48	@ 0x30
 8002f1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80030b8 <_svfiprintf_r+0x1e4>
 8002f1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f22:	f04f 0901 	mov.w	r9, #1
 8002f26:	4623      	mov	r3, r4
 8002f28:	469a      	mov	sl, r3
 8002f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f2e:	b10a      	cbz	r2, 8002f34 <_svfiprintf_r+0x60>
 8002f30:	2a25      	cmp	r2, #37	@ 0x25
 8002f32:	d1f9      	bne.n	8002f28 <_svfiprintf_r+0x54>
 8002f34:	ebba 0b04 	subs.w	fp, sl, r4
 8002f38:	d00b      	beq.n	8002f52 <_svfiprintf_r+0x7e>
 8002f3a:	465b      	mov	r3, fp
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	4638      	mov	r0, r7
 8002f42:	f7ff ff6b 	bl	8002e1c <__ssputs_r>
 8002f46:	3001      	adds	r0, #1
 8002f48:	f000 80a7 	beq.w	800309a <_svfiprintf_r+0x1c6>
 8002f4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f4e:	445a      	add	r2, fp
 8002f50:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f52:	f89a 3000 	ldrb.w	r3, [sl]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 809f 	beq.w	800309a <_svfiprintf_r+0x1c6>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f66:	f10a 0a01 	add.w	sl, sl, #1
 8002f6a:	9304      	str	r3, [sp, #16]
 8002f6c:	9307      	str	r3, [sp, #28]
 8002f6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f72:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f74:	4654      	mov	r4, sl
 8002f76:	2205      	movs	r2, #5
 8002f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f7c:	484e      	ldr	r0, [pc, #312]	@ (80030b8 <_svfiprintf_r+0x1e4>)
 8002f7e:	f7fd f94f 	bl	8000220 <memchr>
 8002f82:	9a04      	ldr	r2, [sp, #16]
 8002f84:	b9d8      	cbnz	r0, 8002fbe <_svfiprintf_r+0xea>
 8002f86:	06d0      	lsls	r0, r2, #27
 8002f88:	bf44      	itt	mi
 8002f8a:	2320      	movmi	r3, #32
 8002f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f90:	0711      	lsls	r1, r2, #28
 8002f92:	bf44      	itt	mi
 8002f94:	232b      	movmi	r3, #43	@ 0x2b
 8002f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fa0:	d015      	beq.n	8002fce <_svfiprintf_r+0xfa>
 8002fa2:	9a07      	ldr	r2, [sp, #28]
 8002fa4:	4654      	mov	r4, sl
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f04f 0c0a 	mov.w	ip, #10
 8002fac:	4621      	mov	r1, r4
 8002fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fb2:	3b30      	subs	r3, #48	@ 0x30
 8002fb4:	2b09      	cmp	r3, #9
 8002fb6:	d94b      	bls.n	8003050 <_svfiprintf_r+0x17c>
 8002fb8:	b1b0      	cbz	r0, 8002fe8 <_svfiprintf_r+0x114>
 8002fba:	9207      	str	r2, [sp, #28]
 8002fbc:	e014      	b.n	8002fe8 <_svfiprintf_r+0x114>
 8002fbe:	eba0 0308 	sub.w	r3, r0, r8
 8002fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	9304      	str	r3, [sp, #16]
 8002fca:	46a2      	mov	sl, r4
 8002fcc:	e7d2      	b.n	8002f74 <_svfiprintf_r+0xa0>
 8002fce:	9b03      	ldr	r3, [sp, #12]
 8002fd0:	1d19      	adds	r1, r3, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	9103      	str	r1, [sp, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bfbb      	ittet	lt
 8002fda:	425b      	neglt	r3, r3
 8002fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8002fe0:	9307      	strge	r3, [sp, #28]
 8002fe2:	9307      	strlt	r3, [sp, #28]
 8002fe4:	bfb8      	it	lt
 8002fe6:	9204      	strlt	r2, [sp, #16]
 8002fe8:	7823      	ldrb	r3, [r4, #0]
 8002fea:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fec:	d10a      	bne.n	8003004 <_svfiprintf_r+0x130>
 8002fee:	7863      	ldrb	r3, [r4, #1]
 8002ff0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ff2:	d132      	bne.n	800305a <_svfiprintf_r+0x186>
 8002ff4:	9b03      	ldr	r3, [sp, #12]
 8002ff6:	1d1a      	adds	r2, r3, #4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	9203      	str	r2, [sp, #12]
 8002ffc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003000:	3402      	adds	r4, #2
 8003002:	9305      	str	r3, [sp, #20]
 8003004:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80030c8 <_svfiprintf_r+0x1f4>
 8003008:	7821      	ldrb	r1, [r4, #0]
 800300a:	2203      	movs	r2, #3
 800300c:	4650      	mov	r0, sl
 800300e:	f7fd f907 	bl	8000220 <memchr>
 8003012:	b138      	cbz	r0, 8003024 <_svfiprintf_r+0x150>
 8003014:	9b04      	ldr	r3, [sp, #16]
 8003016:	eba0 000a 	sub.w	r0, r0, sl
 800301a:	2240      	movs	r2, #64	@ 0x40
 800301c:	4082      	lsls	r2, r0
 800301e:	4313      	orrs	r3, r2
 8003020:	3401      	adds	r4, #1
 8003022:	9304      	str	r3, [sp, #16]
 8003024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003028:	4824      	ldr	r0, [pc, #144]	@ (80030bc <_svfiprintf_r+0x1e8>)
 800302a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800302e:	2206      	movs	r2, #6
 8003030:	f7fd f8f6 	bl	8000220 <memchr>
 8003034:	2800      	cmp	r0, #0
 8003036:	d036      	beq.n	80030a6 <_svfiprintf_r+0x1d2>
 8003038:	4b21      	ldr	r3, [pc, #132]	@ (80030c0 <_svfiprintf_r+0x1ec>)
 800303a:	bb1b      	cbnz	r3, 8003084 <_svfiprintf_r+0x1b0>
 800303c:	9b03      	ldr	r3, [sp, #12]
 800303e:	3307      	adds	r3, #7
 8003040:	f023 0307 	bic.w	r3, r3, #7
 8003044:	3308      	adds	r3, #8
 8003046:	9303      	str	r3, [sp, #12]
 8003048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800304a:	4433      	add	r3, r6
 800304c:	9309      	str	r3, [sp, #36]	@ 0x24
 800304e:	e76a      	b.n	8002f26 <_svfiprintf_r+0x52>
 8003050:	fb0c 3202 	mla	r2, ip, r2, r3
 8003054:	460c      	mov	r4, r1
 8003056:	2001      	movs	r0, #1
 8003058:	e7a8      	b.n	8002fac <_svfiprintf_r+0xd8>
 800305a:	2300      	movs	r3, #0
 800305c:	3401      	adds	r4, #1
 800305e:	9305      	str	r3, [sp, #20]
 8003060:	4619      	mov	r1, r3
 8003062:	f04f 0c0a 	mov.w	ip, #10
 8003066:	4620      	mov	r0, r4
 8003068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800306c:	3a30      	subs	r2, #48	@ 0x30
 800306e:	2a09      	cmp	r2, #9
 8003070:	d903      	bls.n	800307a <_svfiprintf_r+0x1a6>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0c6      	beq.n	8003004 <_svfiprintf_r+0x130>
 8003076:	9105      	str	r1, [sp, #20]
 8003078:	e7c4      	b.n	8003004 <_svfiprintf_r+0x130>
 800307a:	fb0c 2101 	mla	r1, ip, r1, r2
 800307e:	4604      	mov	r4, r0
 8003080:	2301      	movs	r3, #1
 8003082:	e7f0      	b.n	8003066 <_svfiprintf_r+0x192>
 8003084:	ab03      	add	r3, sp, #12
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	462a      	mov	r2, r5
 800308a:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <_svfiprintf_r+0x1f0>)
 800308c:	a904      	add	r1, sp, #16
 800308e:	4638      	mov	r0, r7
 8003090:	f3af 8000 	nop.w
 8003094:	1c42      	adds	r2, r0, #1
 8003096:	4606      	mov	r6, r0
 8003098:	d1d6      	bne.n	8003048 <_svfiprintf_r+0x174>
 800309a:	89ab      	ldrh	r3, [r5, #12]
 800309c:	065b      	lsls	r3, r3, #25
 800309e:	f53f af2d 	bmi.w	8002efc <_svfiprintf_r+0x28>
 80030a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030a4:	e72c      	b.n	8002f00 <_svfiprintf_r+0x2c>
 80030a6:	ab03      	add	r3, sp, #12
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	462a      	mov	r2, r5
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <_svfiprintf_r+0x1f0>)
 80030ae:	a904      	add	r1, sp, #16
 80030b0:	4638      	mov	r0, r7
 80030b2:	f000 f879 	bl	80031a8 <_printf_i>
 80030b6:	e7ed      	b.n	8003094 <_svfiprintf_r+0x1c0>
 80030b8:	08003504 	.word	0x08003504
 80030bc:	0800350e 	.word	0x0800350e
 80030c0:	00000000 	.word	0x00000000
 80030c4:	08002e1d 	.word	0x08002e1d
 80030c8:	0800350a 	.word	0x0800350a

080030cc <_printf_common>:
 80030cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d0:	4616      	mov	r6, r2
 80030d2:	4698      	mov	r8, r3
 80030d4:	688a      	ldr	r2, [r1, #8]
 80030d6:	690b      	ldr	r3, [r1, #16]
 80030d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030dc:	4293      	cmp	r3, r2
 80030de:	bfb8      	it	lt
 80030e0:	4613      	movlt	r3, r2
 80030e2:	6033      	str	r3, [r6, #0]
 80030e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030e8:	4607      	mov	r7, r0
 80030ea:	460c      	mov	r4, r1
 80030ec:	b10a      	cbz	r2, 80030f2 <_printf_common+0x26>
 80030ee:	3301      	adds	r3, #1
 80030f0:	6033      	str	r3, [r6, #0]
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	0699      	lsls	r1, r3, #26
 80030f6:	bf42      	ittt	mi
 80030f8:	6833      	ldrmi	r3, [r6, #0]
 80030fa:	3302      	addmi	r3, #2
 80030fc:	6033      	strmi	r3, [r6, #0]
 80030fe:	6825      	ldr	r5, [r4, #0]
 8003100:	f015 0506 	ands.w	r5, r5, #6
 8003104:	d106      	bne.n	8003114 <_printf_common+0x48>
 8003106:	f104 0a19 	add.w	sl, r4, #25
 800310a:	68e3      	ldr	r3, [r4, #12]
 800310c:	6832      	ldr	r2, [r6, #0]
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	42ab      	cmp	r3, r5
 8003112:	dc26      	bgt.n	8003162 <_printf_common+0x96>
 8003114:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003118:	6822      	ldr	r2, [r4, #0]
 800311a:	3b00      	subs	r3, #0
 800311c:	bf18      	it	ne
 800311e:	2301      	movne	r3, #1
 8003120:	0692      	lsls	r2, r2, #26
 8003122:	d42b      	bmi.n	800317c <_printf_common+0xb0>
 8003124:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003128:	4641      	mov	r1, r8
 800312a:	4638      	mov	r0, r7
 800312c:	47c8      	blx	r9
 800312e:	3001      	adds	r0, #1
 8003130:	d01e      	beq.n	8003170 <_printf_common+0xa4>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	6922      	ldr	r2, [r4, #16]
 8003136:	f003 0306 	and.w	r3, r3, #6
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf02      	ittt	eq
 800313e:	68e5      	ldreq	r5, [r4, #12]
 8003140:	6833      	ldreq	r3, [r6, #0]
 8003142:	1aed      	subeq	r5, r5, r3
 8003144:	68a3      	ldr	r3, [r4, #8]
 8003146:	bf0c      	ite	eq
 8003148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800314c:	2500      	movne	r5, #0
 800314e:	4293      	cmp	r3, r2
 8003150:	bfc4      	itt	gt
 8003152:	1a9b      	subgt	r3, r3, r2
 8003154:	18ed      	addgt	r5, r5, r3
 8003156:	2600      	movs	r6, #0
 8003158:	341a      	adds	r4, #26
 800315a:	42b5      	cmp	r5, r6
 800315c:	d11a      	bne.n	8003194 <_printf_common+0xc8>
 800315e:	2000      	movs	r0, #0
 8003160:	e008      	b.n	8003174 <_printf_common+0xa8>
 8003162:	2301      	movs	r3, #1
 8003164:	4652      	mov	r2, sl
 8003166:	4641      	mov	r1, r8
 8003168:	4638      	mov	r0, r7
 800316a:	47c8      	blx	r9
 800316c:	3001      	adds	r0, #1
 800316e:	d103      	bne.n	8003178 <_printf_common+0xac>
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003178:	3501      	adds	r5, #1
 800317a:	e7c6      	b.n	800310a <_printf_common+0x3e>
 800317c:	18e1      	adds	r1, r4, r3
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	2030      	movs	r0, #48	@ 0x30
 8003182:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003186:	4422      	add	r2, r4
 8003188:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800318c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003190:	3302      	adds	r3, #2
 8003192:	e7c7      	b.n	8003124 <_printf_common+0x58>
 8003194:	2301      	movs	r3, #1
 8003196:	4622      	mov	r2, r4
 8003198:	4641      	mov	r1, r8
 800319a:	4638      	mov	r0, r7
 800319c:	47c8      	blx	r9
 800319e:	3001      	adds	r0, #1
 80031a0:	d0e6      	beq.n	8003170 <_printf_common+0xa4>
 80031a2:	3601      	adds	r6, #1
 80031a4:	e7d9      	b.n	800315a <_printf_common+0x8e>
	...

080031a8 <_printf_i>:
 80031a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031ac:	7e0f      	ldrb	r7, [r1, #24]
 80031ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031b0:	2f78      	cmp	r7, #120	@ 0x78
 80031b2:	4691      	mov	r9, r2
 80031b4:	4680      	mov	r8, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	469a      	mov	sl, r3
 80031ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031be:	d807      	bhi.n	80031d0 <_printf_i+0x28>
 80031c0:	2f62      	cmp	r7, #98	@ 0x62
 80031c2:	d80a      	bhi.n	80031da <_printf_i+0x32>
 80031c4:	2f00      	cmp	r7, #0
 80031c6:	f000 80d2 	beq.w	800336e <_printf_i+0x1c6>
 80031ca:	2f58      	cmp	r7, #88	@ 0x58
 80031cc:	f000 80b9 	beq.w	8003342 <_printf_i+0x19a>
 80031d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031d8:	e03a      	b.n	8003250 <_printf_i+0xa8>
 80031da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031de:	2b15      	cmp	r3, #21
 80031e0:	d8f6      	bhi.n	80031d0 <_printf_i+0x28>
 80031e2:	a101      	add	r1, pc, #4	@ (adr r1, 80031e8 <_printf_i+0x40>)
 80031e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031e8:	08003241 	.word	0x08003241
 80031ec:	08003255 	.word	0x08003255
 80031f0:	080031d1 	.word	0x080031d1
 80031f4:	080031d1 	.word	0x080031d1
 80031f8:	080031d1 	.word	0x080031d1
 80031fc:	080031d1 	.word	0x080031d1
 8003200:	08003255 	.word	0x08003255
 8003204:	080031d1 	.word	0x080031d1
 8003208:	080031d1 	.word	0x080031d1
 800320c:	080031d1 	.word	0x080031d1
 8003210:	080031d1 	.word	0x080031d1
 8003214:	08003355 	.word	0x08003355
 8003218:	0800327f 	.word	0x0800327f
 800321c:	0800330f 	.word	0x0800330f
 8003220:	080031d1 	.word	0x080031d1
 8003224:	080031d1 	.word	0x080031d1
 8003228:	08003377 	.word	0x08003377
 800322c:	080031d1 	.word	0x080031d1
 8003230:	0800327f 	.word	0x0800327f
 8003234:	080031d1 	.word	0x080031d1
 8003238:	080031d1 	.word	0x080031d1
 800323c:	08003317 	.word	0x08003317
 8003240:	6833      	ldr	r3, [r6, #0]
 8003242:	1d1a      	adds	r2, r3, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6032      	str	r2, [r6, #0]
 8003248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800324c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003250:	2301      	movs	r3, #1
 8003252:	e09d      	b.n	8003390 <_printf_i+0x1e8>
 8003254:	6833      	ldr	r3, [r6, #0]
 8003256:	6820      	ldr	r0, [r4, #0]
 8003258:	1d19      	adds	r1, r3, #4
 800325a:	6031      	str	r1, [r6, #0]
 800325c:	0606      	lsls	r6, r0, #24
 800325e:	d501      	bpl.n	8003264 <_printf_i+0xbc>
 8003260:	681d      	ldr	r5, [r3, #0]
 8003262:	e003      	b.n	800326c <_printf_i+0xc4>
 8003264:	0645      	lsls	r5, r0, #25
 8003266:	d5fb      	bpl.n	8003260 <_printf_i+0xb8>
 8003268:	f9b3 5000 	ldrsh.w	r5, [r3]
 800326c:	2d00      	cmp	r5, #0
 800326e:	da03      	bge.n	8003278 <_printf_i+0xd0>
 8003270:	232d      	movs	r3, #45	@ 0x2d
 8003272:	426d      	negs	r5, r5
 8003274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003278:	4859      	ldr	r0, [pc, #356]	@ (80033e0 <_printf_i+0x238>)
 800327a:	230a      	movs	r3, #10
 800327c:	e011      	b.n	80032a2 <_printf_i+0xfa>
 800327e:	6821      	ldr	r1, [r4, #0]
 8003280:	6833      	ldr	r3, [r6, #0]
 8003282:	0608      	lsls	r0, r1, #24
 8003284:	f853 5b04 	ldr.w	r5, [r3], #4
 8003288:	d402      	bmi.n	8003290 <_printf_i+0xe8>
 800328a:	0649      	lsls	r1, r1, #25
 800328c:	bf48      	it	mi
 800328e:	b2ad      	uxthmi	r5, r5
 8003290:	2f6f      	cmp	r7, #111	@ 0x6f
 8003292:	4853      	ldr	r0, [pc, #332]	@ (80033e0 <_printf_i+0x238>)
 8003294:	6033      	str	r3, [r6, #0]
 8003296:	bf14      	ite	ne
 8003298:	230a      	movne	r3, #10
 800329a:	2308      	moveq	r3, #8
 800329c:	2100      	movs	r1, #0
 800329e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80032a2:	6866      	ldr	r6, [r4, #4]
 80032a4:	60a6      	str	r6, [r4, #8]
 80032a6:	2e00      	cmp	r6, #0
 80032a8:	bfa2      	ittt	ge
 80032aa:	6821      	ldrge	r1, [r4, #0]
 80032ac:	f021 0104 	bicge.w	r1, r1, #4
 80032b0:	6021      	strge	r1, [r4, #0]
 80032b2:	b90d      	cbnz	r5, 80032b8 <_printf_i+0x110>
 80032b4:	2e00      	cmp	r6, #0
 80032b6:	d04b      	beq.n	8003350 <_printf_i+0x1a8>
 80032b8:	4616      	mov	r6, r2
 80032ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80032be:	fb03 5711 	mls	r7, r3, r1, r5
 80032c2:	5dc7      	ldrb	r7, [r0, r7]
 80032c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032c8:	462f      	mov	r7, r5
 80032ca:	42bb      	cmp	r3, r7
 80032cc:	460d      	mov	r5, r1
 80032ce:	d9f4      	bls.n	80032ba <_printf_i+0x112>
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d10b      	bne.n	80032ec <_printf_i+0x144>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	07df      	lsls	r7, r3, #31
 80032d8:	d508      	bpl.n	80032ec <_printf_i+0x144>
 80032da:	6923      	ldr	r3, [r4, #16]
 80032dc:	6861      	ldr	r1, [r4, #4]
 80032de:	4299      	cmp	r1, r3
 80032e0:	bfde      	ittt	le
 80032e2:	2330      	movle	r3, #48	@ 0x30
 80032e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032ec:	1b92      	subs	r2, r2, r6
 80032ee:	6122      	str	r2, [r4, #16]
 80032f0:	f8cd a000 	str.w	sl, [sp]
 80032f4:	464b      	mov	r3, r9
 80032f6:	aa03      	add	r2, sp, #12
 80032f8:	4621      	mov	r1, r4
 80032fa:	4640      	mov	r0, r8
 80032fc:	f7ff fee6 	bl	80030cc <_printf_common>
 8003300:	3001      	adds	r0, #1
 8003302:	d14a      	bne.n	800339a <_printf_i+0x1f2>
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	b004      	add	sp, #16
 800330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	f043 0320 	orr.w	r3, r3, #32
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	4833      	ldr	r0, [pc, #204]	@ (80033e4 <_printf_i+0x23c>)
 8003318:	2778      	movs	r7, #120	@ 0x78
 800331a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	6831      	ldr	r1, [r6, #0]
 8003322:	061f      	lsls	r7, r3, #24
 8003324:	f851 5b04 	ldr.w	r5, [r1], #4
 8003328:	d402      	bmi.n	8003330 <_printf_i+0x188>
 800332a:	065f      	lsls	r7, r3, #25
 800332c:	bf48      	it	mi
 800332e:	b2ad      	uxthmi	r5, r5
 8003330:	6031      	str	r1, [r6, #0]
 8003332:	07d9      	lsls	r1, r3, #31
 8003334:	bf44      	itt	mi
 8003336:	f043 0320 	orrmi.w	r3, r3, #32
 800333a:	6023      	strmi	r3, [r4, #0]
 800333c:	b11d      	cbz	r5, 8003346 <_printf_i+0x19e>
 800333e:	2310      	movs	r3, #16
 8003340:	e7ac      	b.n	800329c <_printf_i+0xf4>
 8003342:	4827      	ldr	r0, [pc, #156]	@ (80033e0 <_printf_i+0x238>)
 8003344:	e7e9      	b.n	800331a <_printf_i+0x172>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	f023 0320 	bic.w	r3, r3, #32
 800334c:	6023      	str	r3, [r4, #0]
 800334e:	e7f6      	b.n	800333e <_printf_i+0x196>
 8003350:	4616      	mov	r6, r2
 8003352:	e7bd      	b.n	80032d0 <_printf_i+0x128>
 8003354:	6833      	ldr	r3, [r6, #0]
 8003356:	6825      	ldr	r5, [r4, #0]
 8003358:	6961      	ldr	r1, [r4, #20]
 800335a:	1d18      	adds	r0, r3, #4
 800335c:	6030      	str	r0, [r6, #0]
 800335e:	062e      	lsls	r6, r5, #24
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	d501      	bpl.n	8003368 <_printf_i+0x1c0>
 8003364:	6019      	str	r1, [r3, #0]
 8003366:	e002      	b.n	800336e <_printf_i+0x1c6>
 8003368:	0668      	lsls	r0, r5, #25
 800336a:	d5fb      	bpl.n	8003364 <_printf_i+0x1bc>
 800336c:	8019      	strh	r1, [r3, #0]
 800336e:	2300      	movs	r3, #0
 8003370:	6123      	str	r3, [r4, #16]
 8003372:	4616      	mov	r6, r2
 8003374:	e7bc      	b.n	80032f0 <_printf_i+0x148>
 8003376:	6833      	ldr	r3, [r6, #0]
 8003378:	1d1a      	adds	r2, r3, #4
 800337a:	6032      	str	r2, [r6, #0]
 800337c:	681e      	ldr	r6, [r3, #0]
 800337e:	6862      	ldr	r2, [r4, #4]
 8003380:	2100      	movs	r1, #0
 8003382:	4630      	mov	r0, r6
 8003384:	f7fc ff4c 	bl	8000220 <memchr>
 8003388:	b108      	cbz	r0, 800338e <_printf_i+0x1e6>
 800338a:	1b80      	subs	r0, r0, r6
 800338c:	6060      	str	r0, [r4, #4]
 800338e:	6863      	ldr	r3, [r4, #4]
 8003390:	6123      	str	r3, [r4, #16]
 8003392:	2300      	movs	r3, #0
 8003394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003398:	e7aa      	b.n	80032f0 <_printf_i+0x148>
 800339a:	6923      	ldr	r3, [r4, #16]
 800339c:	4632      	mov	r2, r6
 800339e:	4649      	mov	r1, r9
 80033a0:	4640      	mov	r0, r8
 80033a2:	47d0      	blx	sl
 80033a4:	3001      	adds	r0, #1
 80033a6:	d0ad      	beq.n	8003304 <_printf_i+0x15c>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	079b      	lsls	r3, r3, #30
 80033ac:	d413      	bmi.n	80033d6 <_printf_i+0x22e>
 80033ae:	68e0      	ldr	r0, [r4, #12]
 80033b0:	9b03      	ldr	r3, [sp, #12]
 80033b2:	4298      	cmp	r0, r3
 80033b4:	bfb8      	it	lt
 80033b6:	4618      	movlt	r0, r3
 80033b8:	e7a6      	b.n	8003308 <_printf_i+0x160>
 80033ba:	2301      	movs	r3, #1
 80033bc:	4632      	mov	r2, r6
 80033be:	4649      	mov	r1, r9
 80033c0:	4640      	mov	r0, r8
 80033c2:	47d0      	blx	sl
 80033c4:	3001      	adds	r0, #1
 80033c6:	d09d      	beq.n	8003304 <_printf_i+0x15c>
 80033c8:	3501      	adds	r5, #1
 80033ca:	68e3      	ldr	r3, [r4, #12]
 80033cc:	9903      	ldr	r1, [sp, #12]
 80033ce:	1a5b      	subs	r3, r3, r1
 80033d0:	42ab      	cmp	r3, r5
 80033d2:	dcf2      	bgt.n	80033ba <_printf_i+0x212>
 80033d4:	e7eb      	b.n	80033ae <_printf_i+0x206>
 80033d6:	2500      	movs	r5, #0
 80033d8:	f104 0619 	add.w	r6, r4, #25
 80033dc:	e7f5      	b.n	80033ca <_printf_i+0x222>
 80033de:	bf00      	nop
 80033e0:	08003515 	.word	0x08003515
 80033e4:	08003526 	.word	0x08003526

080033e8 <memmove>:
 80033e8:	4288      	cmp	r0, r1
 80033ea:	b510      	push	{r4, lr}
 80033ec:	eb01 0402 	add.w	r4, r1, r2
 80033f0:	d902      	bls.n	80033f8 <memmove+0x10>
 80033f2:	4284      	cmp	r4, r0
 80033f4:	4623      	mov	r3, r4
 80033f6:	d807      	bhi.n	8003408 <memmove+0x20>
 80033f8:	1e43      	subs	r3, r0, #1
 80033fa:	42a1      	cmp	r1, r4
 80033fc:	d008      	beq.n	8003410 <memmove+0x28>
 80033fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003406:	e7f8      	b.n	80033fa <memmove+0x12>
 8003408:	4402      	add	r2, r0
 800340a:	4601      	mov	r1, r0
 800340c:	428a      	cmp	r2, r1
 800340e:	d100      	bne.n	8003412 <memmove+0x2a>
 8003410:	bd10      	pop	{r4, pc}
 8003412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800341a:	e7f7      	b.n	800340c <memmove+0x24>

0800341c <_sbrk_r>:
 800341c:	b538      	push	{r3, r4, r5, lr}
 800341e:	4d06      	ldr	r5, [pc, #24]	@ (8003438 <_sbrk_r+0x1c>)
 8003420:	2300      	movs	r3, #0
 8003422:	4604      	mov	r4, r0
 8003424:	4608      	mov	r0, r1
 8003426:	602b      	str	r3, [r5, #0]
 8003428:	f7fd fae0 	bl	80009ec <_sbrk>
 800342c:	1c43      	adds	r3, r0, #1
 800342e:	d102      	bne.n	8003436 <_sbrk_r+0x1a>
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	b103      	cbz	r3, 8003436 <_sbrk_r+0x1a>
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	bd38      	pop	{r3, r4, r5, pc}
 8003438:	20000280 	.word	0x20000280

0800343c <memcpy>:
 800343c:	440a      	add	r2, r1
 800343e:	4291      	cmp	r1, r2
 8003440:	f100 33ff 	add.w	r3, r0, #4294967295
 8003444:	d100      	bne.n	8003448 <memcpy+0xc>
 8003446:	4770      	bx	lr
 8003448:	b510      	push	{r4, lr}
 800344a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003452:	4291      	cmp	r1, r2
 8003454:	d1f9      	bne.n	800344a <memcpy+0xe>
 8003456:	bd10      	pop	{r4, pc}

08003458 <_realloc_r>:
 8003458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800345c:	4680      	mov	r8, r0
 800345e:	4615      	mov	r5, r2
 8003460:	460c      	mov	r4, r1
 8003462:	b921      	cbnz	r1, 800346e <_realloc_r+0x16>
 8003464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003468:	4611      	mov	r1, r2
 800346a:	f7ff bc4b 	b.w	8002d04 <_malloc_r>
 800346e:	b92a      	cbnz	r2, 800347c <_realloc_r+0x24>
 8003470:	f7ff fbdc 	bl	8002c2c <_free_r>
 8003474:	2400      	movs	r4, #0
 8003476:	4620      	mov	r0, r4
 8003478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800347c:	f000 f81a 	bl	80034b4 <_malloc_usable_size_r>
 8003480:	4285      	cmp	r5, r0
 8003482:	4606      	mov	r6, r0
 8003484:	d802      	bhi.n	800348c <_realloc_r+0x34>
 8003486:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800348a:	d8f4      	bhi.n	8003476 <_realloc_r+0x1e>
 800348c:	4629      	mov	r1, r5
 800348e:	4640      	mov	r0, r8
 8003490:	f7ff fc38 	bl	8002d04 <_malloc_r>
 8003494:	4607      	mov	r7, r0
 8003496:	2800      	cmp	r0, #0
 8003498:	d0ec      	beq.n	8003474 <_realloc_r+0x1c>
 800349a:	42b5      	cmp	r5, r6
 800349c:	462a      	mov	r2, r5
 800349e:	4621      	mov	r1, r4
 80034a0:	bf28      	it	cs
 80034a2:	4632      	movcs	r2, r6
 80034a4:	f7ff ffca 	bl	800343c <memcpy>
 80034a8:	4621      	mov	r1, r4
 80034aa:	4640      	mov	r0, r8
 80034ac:	f7ff fbbe 	bl	8002c2c <_free_r>
 80034b0:	463c      	mov	r4, r7
 80034b2:	e7e0      	b.n	8003476 <_realloc_r+0x1e>

080034b4 <_malloc_usable_size_r>:
 80034b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b8:	1f18      	subs	r0, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bfbc      	itt	lt
 80034be:	580b      	ldrlt	r3, [r1, r0]
 80034c0:	18c0      	addlt	r0, r0, r3
 80034c2:	4770      	bx	lr

080034c4 <_init>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	bf00      	nop
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr

080034d0 <_fini>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	bf00      	nop
 80034d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d6:	bc08      	pop	{r3}
 80034d8:	469e      	mov	lr, r3
 80034da:	4770      	bx	lr
